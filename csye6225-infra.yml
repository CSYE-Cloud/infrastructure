AWSTemplateFormatVersion: 2010-09-09

Description: template creates vpc with three public subnets

# The following metadata is used to group the parameters
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VpcCIDR
      -
        Label:
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          # - RDSParameterGroup
      -
        Label:
          default: "RDS Parameter Group"
        Parameters:
          - DBInstance


# Parameters are used to to build flexible CloudFormation templates
Parameters:
  VpcCIDR:
    Default: 10.1.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.1.0.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.1.1.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.1.2.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 3
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.1.4.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.1.5.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.1.7.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 3
    Type: String

  AMIImage:
    Type: String
    Default: ami-0845951ad762c164b
    Description: Enter ami id

  AccessKey:
    Type: String
    Default: AKIA2XKC6NOAADDD4U6M
    Description: Enter access key

  SecretKey:
    Type: String
    Default: rd5QR6ybUimkQggH3yR0kHwTUsdKLS+FZ9dUZBnP
    Description: Enter secret key
  
  profileName:
    Type: String
    Default: dev
    Description: Enter profile name

  DBInstanceID:
    Default: csye6225
    Description: Instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.

  DBName:
    Default: csye6225
    Description: Database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  DBUsername:
    Default: csye6225
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    Default: Garima12345
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: Test VPC

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # NATGateway:
  #  Type: AWS::EC2::NatGateway
  #  Properties:
  #   ConnectivityType: private
  #   SubnetId: !Ref PublicSubnet1
  #   Tags:
  #     - Key: Name
  #       Value: Test NATGW

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

# Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

# Create Public Subnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: Public Subnet 3
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

# Create Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private Route Table
      VpcId: !Ref VPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Add a Public Route to the Route Table
  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     # DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway
  #     RouteTableId: !Ref PrivateRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Associate Public Subnet3 with Public Route Table
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

# Associate Private Subnet3 with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

# Associate Public Subnet3 with Public Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

# Associate Public Subnet3 with Public Route Table
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1
      VpcId: !Ref VPC

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: Private Subnet 2
      VpcId: !Ref VPC

# Create Private Subnet3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3
      VpcId: !Ref VPC

#EC2 Security Group
  applicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security group with ports
      GroupName: applicationSecurityGroup
      SecurityGroupIngress: [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8080",
            "ToPort" : "8080",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref VPC

# Create Security Group for the DataBase
  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref applicationSecurityGroup
      Tags:
        - Key: Name
          Value: DataBase Security Group
      VpcId: !Ref VPC

  #RDS Parameter Group
  DBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: MySQL Parameter Group
      Family: mysql8.0
#
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
     DBSubnetGroupDescription: Subnet Group for mySQL database
     SubnetIds:
       - Ref: PrivateSubnet1
       - Ref: PrivateSubnet2
       - Ref: PrivateSubnet3

#EC2 Instance:
  EC2Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: !Ref AMIImage
        InstanceType: t2.micro
        KeyName: GarimaChoudhary
        NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: applicationSecurityGroup
          SubnetId:
            Ref: PublicSubnet1
        IamInstanceProfile: !Ref DemoInstanceProfile
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/sh
              echo export rds="${Database.Endpoint.Address}" >> /etc/profile
              echo export db_username="csye6225" >> /etc/profile
              echo export db_password="Garima12345" >> /etc/profile
              echo export bucket="${S3Bucket}" >> /etc/profile
              echo export access_key="${AccessKey}" >> /etc/profile
              echo export secret_key="${SecretKey}" >> /etc/profile
              echo export dbname="csye6225" >> /etc/profile
              echo export region="us-east-1" >> /etc/profile
              echo Environment=\"rds=${Database.Endpoint.Address}\" >> /home/ec2-user/webapp.service
              echo Environment=\"db_username=csye6225\" >> /home/ec2-user/webapp.service
              echo Environment=\"db_password=Garima12345\" >> /home/ec2-user/webapp.service
              echo Environment=\"bucket=${S3Bucket}\" >> /home/ec2-user/webapp.service
              echo Environment=\"access_key=${AccessKey}\" >> /home/ec2-user/webapp.service
              echo Environment=\"secret_key=${SecretKey}\" >> /home/ec2-user/webapp.service
              echo Environment=\"region=us-east-1\" >> /home/ec2-user/webapp.service
              echo Environment=\"dbname=csye6225\" >> /home/ec2-user/webapp.service
              sudo cp /home/ec2-user/webapp.service /etc/systemd/system/
              sudo systemctl daemon reload
              sudo systemctl enable webapp.service
              sudo systemctl start webapp.service
              sudo systemctl status webapp.service
             

  Database:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup
      VPCSecurityGroups:
        - !GetAtt DataBaseSecurityGroup.GroupId
      Engine: MySQL
      EngineVersion: 8.0.28
      MultiAZ: false
      PubliclyAccessible: false


  S3Bucket:
    DeletionPolicy: Delete
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: profileName
          - "garimachoudhary.me"
      LifecycleConfiguration:
         Rules:
            - Id: lifecycle rule
              Prefix: standard
              Status: Enabled
              # ExpirationInDays: 365
              Transitions:
                - TransitionInDays: 30
                  StorageClass: STANDARD_IA  
      BucketEncryption:
         ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      AccessControl: Private 
      PublicAccessBlockConfiguration:
         BlockPublicAcls: "true"
         BlockPublicPolicy: "true"
         IgnorePublicAcls: "true"
         RestrictPublicBuckets: "true" 

  RolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - 's3:Put*'
              - 's3:Get*'
              - 's3:Delete*'
            Resource: 
              -  !Sub arn:aws:s3:::${S3Bucket}
              -  !Sub arn:aws:s3:::${S3Bucket}/*
      Roles:
        - Ref: RootRole     

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "EC2-CSYE6225"
      # Policies:
      #   - Ref: RolePolicies
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles: 
       - !Ref RootRole
                  

